[{"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\app-reducer.ts":"1","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\auth-reducer.ts":"2","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\dialogs-reducer.ts":"3","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\profile-reducer.ts":"4","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\sidebar-reducer.ts":"5","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\users-reducer.ts":"6","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\Pagination\\Pagination.tsx":"7","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\Users.tsx":"8","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\redux-store.ts":"9","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\users-selectors.ts":"10","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\api.ts":"11","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Login\\Login.tsx":"12","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\validators\\validators.ts":"13","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\FormsControls\\FormsControls.tsx":"14","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\auth-api.ts":"15","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\security-api.ts":"16","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\profile-api.ts":"17","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\users-api.ts":"18","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\DialogsContainer.tsx":"19","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\object-helpers.ts":"20","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Dialogs.tsx":"21","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Message\\AddMessageForm.tsx":"22","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\App.tsx":"23","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\hoc\\withSuspense.tsx":"24","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\hoc\\withAuthRedirect.tsx":"25","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\Preloader\\Preloader.tsx":"26","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Video\\Video.tsx":"27","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Settings\\Settings.tsx":"28","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\User.tsx":"29","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\types.ts":"30","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx":"31","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx":"32","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\myPosts.tsx":"33","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\AddPostForm.tsx":"34","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileContainer.tsx":"35","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\myPostsContainer.tsx":"36","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\Post\\Post.tsx":"37","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\Profile.tsx":"38","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx":"39","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\index.tsx":"40","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\NavBar\\NavBar.tsx":"41","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Music\\Music.tsx":"42","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\News\\News.tsx":"43","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Header\\Header.tsx":"44","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\News\\newNews\\newNews.tsx":"45","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx":"46","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Message\\Message.tsx":"47","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\UsersSearchForm.tsx":"48","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\UsersPage.tsx":"49","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Login\\LoginForm.tsx":"50","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\auth-selectors.ts":"51","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\pages\\Chat\\ChatPage.tsx":"52"},{"size":960,"mtime":1612985523827,"results":"53","hashOfConfig":"54"},{"size":2876,"mtime":1613067182066,"results":"55","hashOfConfig":"54"},{"size":1443,"mtime":1612976115351,"results":"56","hashOfConfig":"54"},{"size":3975,"mtime":1613060216623,"results":"57","hashOfConfig":"54"},{"size":260,"mtime":1612961506228,"results":"58","hashOfConfig":"54"},{"size":5015,"mtime":1613138889223,"results":"59","hashOfConfig":"54"},{"size":1674,"mtime":1613137642013,"results":"60","hashOfConfig":"54"},{"size":3275,"mtime":1613207894555,"results":"61","hashOfConfig":"54"},{"size":1423,"mtime":1612975733863,"results":"62","hashOfConfig":"54"},{"size":929,"mtime":1613135501462,"results":"63","hashOfConfig":"54"},{"size":721,"mtime":1612893668096,"results":"64","hashOfConfig":"54"},{"size":986,"mtime":1613151420721,"results":"65","hashOfConfig":"54"},{"size":397,"mtime":1612806557975,"results":"66","hashOfConfig":"54"},{"size":1602,"mtime":1613049728270,"results":"67","hashOfConfig":"54"},{"size":902,"mtime":1613057682145,"results":"68","hashOfConfig":"54"},{"size":290,"mtime":1612894878105,"results":"69","hashOfConfig":"54"},{"size":1155,"mtime":1612963350183,"results":"70","hashOfConfig":"54"},{"size":748,"mtime":1613139050830,"results":"71","hashOfConfig":"54"},{"size":588,"mtime":1612982946009,"results":"72","hashOfConfig":"54"},{"size":239,"mtime":1612965864148,"results":"73","hashOfConfig":"54"},{"size":1477,"mtime":1613226156370,"results":"74","hashOfConfig":"54"},{"size":914,"mtime":1613047879305,"results":"75","hashOfConfig":"54"},{"size":6637,"mtime":1613223114015,"results":"76","hashOfConfig":"54"},{"size":348,"mtime":1613033153496,"results":"77","hashOfConfig":"54"},{"size":948,"mtime":1613035480461,"results":"78","hashOfConfig":"54"},{"size":194,"mtime":1613064557939,"results":"79","hashOfConfig":"54"},{"size":387,"mtime":1613040407474,"results":"80","hashOfConfig":"54"},{"size":648,"mtime":1613039994432,"results":"81","hashOfConfig":"54"},{"size":1672,"mtime":1613039748078,"results":"82","hashOfConfig":"54"},{"size":856,"mtime":1613061036291,"results":"83","hashOfConfig":"54"},{"size":3556,"mtime":1613062577208,"results":"84","hashOfConfig":"54"},{"size":1935,"mtime":1613054981983,"results":"85","hashOfConfig":"54"},{"size":1173,"mtime":1613060999106,"results":"86","hashOfConfig":"54"},{"size":1038,"mtime":1613054876034,"results":"87","hashOfConfig":"54"},{"size":2533,"mtime":1613062638914,"results":"88","hashOfConfig":"54"},{"size":812,"mtime":1613061010784,"results":"89","hashOfConfig":"54"},{"size":590,"mtime":1613061398672,"results":"90","hashOfConfig":"54"},{"size":1006,"mtime":1613062311840,"results":"91","hashOfConfig":"54"},{"size":1230,"mtime":1613062779444,"results":"92","hashOfConfig":"54"},{"size":259,"mtime":1613065340072,"results":"93","hashOfConfig":"54"},{"size":1154,"mtime":1613063747235,"results":"94","hashOfConfig":"54"},{"size":378,"mtime":1613067258873,"results":"95","hashOfConfig":"54"},{"size":433,"mtime":1613063717461,"results":"96","hashOfConfig":"54"},{"size":1684,"mtime":1613213720813,"results":"97","hashOfConfig":"54"},{"size":525,"mtime":1613063686679,"results":"98","hashOfConfig":"54"},{"size":471,"mtime":1613064480961,"results":"99","hashOfConfig":"54"},{"size":617,"mtime":1613228423420,"results":"100","hashOfConfig":"54"},{"size":1981,"mtime":1613163074088,"results":"101","hashOfConfig":"54"},{"size":570,"mtime":1613151714787,"results":"102","hashOfConfig":"54"},{"size":1628,"mtime":1613151404531,"results":"103","hashOfConfig":"54"},{"size":337,"mtime":1613211869562,"results":"104","hashOfConfig":"54"},{"size":1723,"mtime":1613229991911,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"odjy5u",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"108"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"108"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"108"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"108"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"108"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"108"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"108"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"108"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"108"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"108"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"108"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"108"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\app-reducer.ts",[],["229","230"],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\auth-reducer.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\dialogs-reducer.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\profile-reducer.ts",["231"],"import { profileAPI } from '../api/profile-api';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport {PostsType, ProfilePhotoType, ProfileType} from \"../utils/types\"\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hey, how are you?\", likesCount: 23 },\r\n        { id: 2, message: \"it's my first post\", likesCount: 9 },\r\n        { id: 3, message: \"I'm so boring\", likesCount: 44 },\r\n        { id: 4, message: \"today i do some cool stuff\", likesCount: 53 },\r\n        { id: 5, message: \"Adorable dog\", likesCount: 109 }\r\n    ] as Array<PostsType>, \r\n    profile: null as ProfileType | null,\r\n    status: \"\" as string,\r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NW/PROFILE/ADD-POST\":\r\n            let newPost = {\r\n                id: state.posts.length + 1,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case \"NW/PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile,\r\n            };\r\n        case \"NW/PROFILE/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        case \"NW/PROFILE/SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n            };\r\n        case \"NW/PROFILE/DELETE-POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    addPost: (newPostText:string) => ({type: \"NW/PROFILE/ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile:ProfileType) => ({type: \"NW/PROFILE/SET-USER-PROFILE\", profile} as const),\r\n    setStatus: (status:string) => ({type: \"NW/PROFILE/SET-STATUS\", status} as const),\r\n    deletePost: (postId:number) => ({type: \"NW/PROFILE/DELETE-POST\", postId} as const),\r\n    savePhotoSuccess: (photos:ProfilePhotoType) => ({type: \"NW/PROFILE/SAVE-PHOTO-SUCCESS\", photos} as const)\r\n}\r\n\r\n\r\n\r\n\r\nexport const getStatus = (userId:number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status:string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile:ProfileType):ThunkType => \r\n    async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if(userId != null){\r\n        dispatch(getUserProfile(userId));\r\n        } else{\r\n            throw Error(\"userId can't be null\")\r\n        }\r\n    }\r\n    else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\nexport const getUserProfile = (userId:number):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\n\r\nexport default profileReducer\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\sidebar-reducer.ts",["232"],"\r\n\r\nlet initialState = {\r\n};\r\n\r\ntype sidebarReducerActionType = any;\r\nconst sidebarReducer = (state=initialState, action:sidebarReducerActionType) =>{\r\n    return(state);\r\n}\r\n\r\nexport default sidebarReducer\r\n\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\users-reducer.ts",["233","234"],"import { UsersType } from \"../utils/types\";\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { APIResponseType } from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10 as number,\r\n    totalCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: false as boolean,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean \r\n    } \r\n}\r\n\r\nconst usersReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NW/USERS/FOllOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            };\r\n        case \"NW/USERS/UNFOllOW\" :\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n        case \"NW/USERS/SET_CURRENT_PAGE\" :\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        case \"NW/USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"NW/USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {...action.payload}\r\n            }\r\n        case \"NW/USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount,\r\n            }\r\n        case \"NW/USERS/TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        case \"NW/USERS/TOGGLE_IS_FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    [state.followingInProgress.filter(id => id != action.userId)],\r\n            } as InitialStateType\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId:number) => ({type: \"NW/USERS/FOllOW\", userId} as const),\r\n    unfollowSuccess: (userId:number) => ({type: \"NW/USERS/UNFOllOW\", userId} as const),\r\n    setCurrentPage: (currentPage:number) => ({type: \"NW/USERS/SET_CURRENT_PAGE\", currentPage} as const),\r\n    setUsers: (users:Array<UsersType>) => ({type: \"NW/USERS/SET_USERS\", users} as const),\r\n    setFilter: (filter: FilterType) => ({type: \"NW/USERS/SET_FILTER\", payload: {...filter}} as const),\r\n    setTotalUsersCount: (totalCount:number) => ({type: \"NW/USERS/SET_TOTAL_USERS_COUNT\", totalCount} as const),\r\n    toggleIsFetching: (isFetching:boolean) => ({type: \"NW/USERS/TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    toggleFollowingProgress: (isFetching:boolean, userId:number) => ({type: \"NW/USERS/TOGGLE_IS_FOLLOWING\", isFetching, userId} as const)\r\n}\r\n\r\n\r\nexport const getUsers = (currentPage:number, pageSize:number, filter: FilterType):ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n        \r\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n            dispatch(actions.toggleIsFetching(false));\r\n            dispatch(actions.setUsers(data.items));\r\n            dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\n\r\n\r\n//### type for apiMethod\r\nconst _followUnfollowFlow = async(dispatch: Dispatch<ActionsTypes>, userId:number, apiMethod: (userId: number) => Promise<APIResponseType>, \r\n    actionCreator: (userId: number) => ActionsTypes ) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n        let response = await apiMethod(userId);\r\n                if (response.resultCode == 0) {\r\n                    dispatch(actionCreator(userId));\r\n                }\r\n                dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId:number): ThunkType => {\r\n    return  async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId:number): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\Pagination\\Pagination.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\Users.tsx",["235","236"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FilterType, getUsers, follow, unfollow } from \"../../redux/users-reducer\";\r\nimport { getCurrentPage, getFilter, getFollowingInProgress, getPageSize, getTotalUsersCount, requestUsers } from \"../../redux/users-selectors\";\r\nimport Pagination from \"../Common/Pagination/Pagination\";\r\nimport User from \"./User\";\r\nimport s from \"./Users.module.css\";\r\nimport { UsersSearchForm } from \"./UsersSearchForm\";\r\nimport * as queryString from 'querystring'\r\n\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = {\r\n    term?: string;\r\n    page?: string;\r\n    friend?: string;\r\n}\r\n\r\nexport const Users:React.FC<PropsType> = () => {\r\n\r\n    const totalCount= useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const users = useSelector(requestUsers)\r\n    const pageSize = useSelector(getPageSize)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const filter = useSelector(getFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        \r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: \"/developers\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n    \r\n    const onPageChanged = (pageNumber:number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter))\r\n    }\r\n    const unfollow_ = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    const follow_ = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <UsersSearchForm onFilterChanged = {onFilterChanged} />\r\n\r\n            <Pagination currentPage={currentPage} onPageChanged={onPageChanged} totalCount={totalCount} pageSize={pageSize} />\r\n            <div>\r\n                {users.map(u => <User user={u} key={u.id} followingInProgress={followingInProgress} unfollow={unfollow_} follow={follow_} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\redux-store.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\users-selectors.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\api.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Login\\Login.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\validators\\validators.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\FormsControls\\FormsControls.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\auth-api.ts",["237"],"import { AxiosPromise } from 'axios';\r\nimport React from 'react'\r\nimport { instance, ResultCodeEnum, ResultCodeForCaptchaEnum,APIResponseType } from './api';\r\n\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id:number\r\n    email: string \r\n    login:string\r\n}\r\ntype LoginResponseType = {userId:number}\r\ntype LoginResultCodeType = ResultCodeEnum | ResultCodeForCaptchaEnum\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res=>res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseType, LoginResultCodeType>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`) as AxiosPromise<APIResponseType> ;\r\n    },\r\n    }\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\security-api.ts",["238"],"import React from 'react'\r\nimport {instance} from './api';\r\n\r\n\r\ntype getCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    },\r\n}","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\profile-api.ts",["239"],"import React from 'react'\r\nimport { instance, APIResponseType } from './api';\r\nimport { ProfilePhotoType, ProfileType } from './../utils/types';\r\n\r\n\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: ProfilePhotoType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType<Array<string>>>('profile/status/', { status: status }).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>('profile/photo/', formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n    };","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\api\\users-api.ts",["240"],"import { UsersType } from './../utils/types';\r\nimport { instance, GetItemsType, APIResponseType } from './api';\r\nimport React from 'react'\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 1, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<Array<UsersType>>>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend===null ? '' : `&friend=${friend}`))\r\n        .then(res => res.data);\r\n    },\r\n\r\n    follow(userId:number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\DialogsContainer.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\object-helpers.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Dialogs.tsx",["241"],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Message\\AddMessageForm.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\App.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\hoc\\withSuspense.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\hoc\\withAuthRedirect.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Common\\Preloader\\Preloader.tsx",["242"],"import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\n\r\nlet Preloader = () => {\r\nreturn(<img src={preloader} /> )\r\n}\r\n\r\nexport default Preloader;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Video\\Video.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Settings\\Settings.tsx",["243"],"import { type } from 'os';\r\nimport React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\ntype PropsType = {}\r\nconst Settings: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <a className={s.item} href=\"/profileSettings\" >Profile</a>\r\n                </div>\r\n                <div>\r\n                <a className={s.item} href=\"/privacy\" >Privacy</a>\r\n                </div>\r\n                <div>\r\n                <a className={s.item} href=\"/account\" >Account</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\User.tsx",["244"],"import React from \"react\";\r\nimport s from \"./Users.module.css\"\r\nimport userPhoto from \"../../assets/images/userPhoto.png\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UsersType } from \"../../utils/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, ...props}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img className={s.usersImg} src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { props.unfollow(user.id); }} >\r\n                            Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { props.follow(user.id); }} >\r\n                            Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"user.location.city\"}</div>\r\n                    <div>{\"user.location.country\"}</div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\utils\\types.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileInfo.tsx",["245"],"import React, { useState } from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from \"../../../assets/images/userPhoto.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\nimport ProfileDataForm from './ProfileDataForm';\r\n//import {ProfileComponentPropsType} from '../Profile'\r\nimport { ContactsType, ProfileType } from '../../../utils/types';\r\n\r\n\r\n//### When remove then delete this props and use ProfileComponentPropsType in ProfileInfo component\r\ntype PropsType = {\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    status: string\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n        //### todo: Remove Then\r\n        .then(()=>{\r\n        setEditMode(false)});\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n            </div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} key={key} />   //about keys 11th video 1:22:00\r\n                })}\r\n            </div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPopsType = {\r\n    contactValue: string\r\n    contactTitle: string\r\n}\r\nexport const Contact: React.FC<ContactsPopsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.contacts}>\r\n            <b>{contactTitle}: {contactValue} </b>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileDataForm.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\myPosts.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\AddPostForm.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileContainer.tsx",["246"],"import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../utils/types';\r\n\r\n\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype PathParamsType = {userId: string}\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile(){\r\n        let userId: number | null = +this.props.match.params.userId //about + 11th video 1:35:31\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                //### todo: maybe replace push with redirect?\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state(authorizedUserId)\")\r\n        } else{\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId ){\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId} \r\n            profile={this.props.profile} status={this.props.status} \r\n            updateStatus = {this.props.updateStatus} savePhoto ={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }   \r\n        ),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\myPostsContainer.tsx",["247"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions} from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostsType } from '../../../utils/types';\r\nimport MyPosts from './myPosts';\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        postPhoto: state.profilePage.profile?.photos.small\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPost}) (MyPosts);\r\n\r\nexport default MyPostsContainer\r\n\r\ntype MapPropsType = {\r\n    posts: Array<PostsType>\r\n    postPhoto: string | undefined\r\n}\r\ntype DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n} \r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\myPosts\\Post\\Post.tsx",["248","249"],"import React from 'react';\r\nimport s from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/userPhoto.png'\r\n\r\n\r\ntype PropsType = {\r\n    likeCount: number\r\n    postPhoto: string | undefined\r\n    message: string\r\n}\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            {props.postPhoto ? <img src={props.postPhoto}/> : <img src={userPhoto} />  }\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\Profile.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Profile\\ProfileInfo\\ProfileStatusWithHooks.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\index.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\NavBar\\NavBar.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Music\\Music.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\News\\News.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Header\\Header.tsx",["250"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout, Menu, Row, Col, Button } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsAuth, getLogin, getProfilePhoto } from '../../redux/auth-selectors';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport s from './Header.module.css';\r\n\r\n\r\n\r\n\r\nexport const Header: React.FC = () => {\r\nconst { Header} = Layout;\r\n\r\nconst  small  = useSelector(getProfilePhoto)\r\nconst isAuth = useSelector(getIsAuth)\r\nconst login = useSelector(getLogin)\r\nconst dispatch = useDispatch()\r\nconst logoutCallback = () => {\r\n    dispatch(logout())\r\n}\r\n\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n        <Row>\r\n            <Col span={1}>\r\n            <img className={s.headerLogo} src='https://pngimg.com/uploads/circle/circle_PNG50.png' />\r\n            </Col>\r\n            <Col span={19}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                <Menu.Item key=\"1\"><Link to=\"/developers\"> Developers </Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n            {isAuth \r\n                ? <> <Col span={1}>\r\n                        <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} src={small} />\r\n                        \r\n                    </Col>\r\n                    <Col span={3}>\r\n                        <Button onClick={logoutCallback} >Log out</Button>\r\n                    </Col> </>\r\n                : <Col span={4}> <Button> <Link  to=\"/login\" >Login</Link> </Button> </Col>\r\n            }\r\n        </Row>      \r\n    </Header>\r\n    )\r\n}\r\n\r\n\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\News\\newNews\\newNews.tsx",["251"],"import React from 'react';\r\nimport s from './newNews.module.css';\r\n\r\ntype PropsType = {\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\nconst NewNews: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            <img src=\"https://vjoy.cc/wp-content/uploads/2020/10/prikolnye-avatarki-vk-dlya-parnej_023.jpg\"></img>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewNews;","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\DialogItem\\DialogItem.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Dialogs\\Message\\Message.tsx",["252"],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\UsersSearchForm.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Users\\UsersPage.tsx",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\components\\Login\\LoginForm.tsx",["253"],"import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { createField, GetStringKeys, Input } from \"../Common/FormsControls/FormsControls\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"Remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input)}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({ form: 'login' })(LoginForm)\r\n\r\n\r\ntype LoginFormOwnPropsType = { captchaUrl: string | null; }\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n","D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\redux\\auth-selectors.ts",[],"D:\\program_project\\react\\SamuraiWay\\FirstProjest\\way-1\\src\\pages\\Chat\\ChatPage.tsx",[],{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":50,"column":53,"nodeType":"260","messageId":"261","endLine":50,"endColumn":55},{"ruleId":"262","severity":1,"message":"263","line":14,"column":6,"nodeType":"264","messageId":"265","endLine":14,"endColumn":22},{"ruleId":"258","severity":1,"message":"259","line":66,"column":64,"nodeType":"260","messageId":"261","endLine":66,"endColumn":66},{"ruleId":"258","severity":1,"message":"266","line":108,"column":41,"nodeType":"260","messageId":"261","endLine":108,"endColumn":43},{"ruleId":"267","severity":1,"message":"268","line":54,"column":8,"nodeType":"269","endLine":54,"endColumn":10,"suggestions":"270"},{"ruleId":"267","severity":1,"message":"271","line":65,"column":8,"nodeType":"269","endLine":65,"endColumn":29,"suggestions":"272"},{"ruleId":"262","severity":1,"message":"273","line":2,"column":8,"nodeType":"264","messageId":"265","endLine":2,"endColumn":13},{"ruleId":"262","severity":1,"message":"273","line":1,"column":8,"nodeType":"264","messageId":"265","endLine":1,"endColumn":13},{"ruleId":"262","severity":1,"message":"273","line":1,"column":8,"nodeType":"264","messageId":"265","endLine":1,"endColumn":13},{"ruleId":"262","severity":1,"message":"273","line":3,"column":8,"nodeType":"264","messageId":"265","endLine":3,"endColumn":13},{"ruleId":"262","severity":1,"message":"274","line":5,"column":10,"nodeType":"264","messageId":"265","endLine":5,"endColumn":18},{"ruleId":"275","severity":1,"message":"276","line":6,"column":8,"nodeType":"277","endLine":6,"endColumn":31},{"ruleId":"262","severity":1,"message":"278","line":1,"column":10,"nodeType":"264","messageId":"265","endLine":1,"endColumn":14},{"ruleId":"275","severity":1,"message":"276","line":22,"column":25,"nodeType":"277","endLine":22,"endColumn":119},{"ruleId":"275","severity":1,"message":"276","line":44,"column":17,"nodeType":"277","endLine":44,"endColumn":88},{"ruleId":"258","severity":1,"message":"259","line":45,"column":43,"nodeType":"260","messageId":"261","endLine":45,"endColumn":45},{"ruleId":"262","severity":1,"message":"273","line":1,"column":8,"nodeType":"264","messageId":"265","endLine":1,"endColumn":13},{"ruleId":"275","severity":1,"message":"276","line":14,"column":32,"nodeType":"277","endLine":14,"endColumn":60},{"ruleId":"275","severity":1,"message":"276","line":14,"column":63,"nodeType":"277","endLine":14,"endColumn":86},{"ruleId":"275","severity":1,"message":"276","line":29,"column":13,"nodeType":"277","endLine":29,"endColumn":102},{"ruleId":"275","severity":1,"message":"276","line":12,"column":13,"nodeType":"277","endLine":12,"endColumn":109},{"ruleId":"275","severity":1,"message":"276","line":15,"column":9,"nodeType":"277","endLine":15,"endColumn":68},{"ruleId":"275","severity":1,"message":"276","line":15,"column":28,"nodeType":"277","endLine":15,"endColumn":52},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'InitialStateType' is defined but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageSize'. Either include them or remove the dependency array.","ArrayExpression",["281"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["282"],"'React' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'type' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageSize]",{"range":"287","text":"288"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"289","text":"290"},[1973,1975],"[currentPage, dispatch, filter, history.location.search, pageSize]",[2366,2387],"[filter, currentPage, history]"]