{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/myPosts/myPosts.module.css","components/Profile/myPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/myPosts/AddPostForm.tsx","components/Profile/myPosts/Post/Post.tsx","components/Profile/myPosts/myPosts.tsx","components/Profile/myPosts/myPostsContainer.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","AddPostReduxForm","reduxForm","form","props","onSubmit","handleSubmit","createField","required","maxLength1000","Textarea","Post","className","s","item","postPhoto","src","userPhoto","message","likeCount","maxLengthCreator","MyPosts","postsElements","posts","map","likesCount","id","myPostsBlock","formData","addPost","newPostText","MyPostMemorized","React","memo","MyPostsContainer","connect","state","profilePage","profile","photos","small","actions","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","error","Input","type","Object","keys","contacts","key","style","formSummaryError","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","onClick","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfo","large","mainPhoto","target","files","length","descriptionBlock","initialValues","then","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.785d5474.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__205bj\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3AwYs\",\"mainPhoto\":\"ProfileInfo_mainPhoto__13b1I\",\"contacts\":\"ProfileInfo_contacts__3RRsx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"myPosts_myPostsBlock__TtKEC\",\"posts\":\"myPosts_posts__10skA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__FVuvM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profilePage\":\"Profile_profilePage__1z4ZQ\"};","import React from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { required } from '../../../utils/validators/validators';\r\nimport { createField, GetStringKeys, Textarea } from '../../Common/FormsControls/FormsControls';\r\nimport { maxLength1000 } from './myPosts';\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, OwnPropsType> & OwnPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n            {createField<AddPostFormValuesTypeKeys>(\"Enter your post text\", \"newPostText\", [required, maxLength1000], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport const AddPostReduxForm = reduxForm<AddPostFormValuesType, OwnPropsType>({ form: \"profileAddPostForm\" })(AddPostForm)\r\n\r\nexport type AddPostFormValuesType = {newPostText: string}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\ntype OwnPropsType = {}\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/userPhoto.png'\r\n\r\n\r\ntype PropsType = {\r\n    likeCount: number\r\n    postPhoto: string | undefined\r\n    message: string\r\n}\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            {props.postPhoto ? <img src={props.postPhoto}/> : <img src={userPhoto} />  }\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { PostsType } from '../../../utils/types';\r\nimport { maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { AddPostFormValuesType, AddPostReduxForm } from './AddPostForm';\r\nimport s from './myPosts.module.css';\r\nimport Post from './Post/Post';\r\n\r\n\r\nexport const maxLength1000 = maxLengthCreator(1000);\r\n\r\ntype PropsType = {\r\n    addPost: (newPostText: string) => void\r\n    posts: Array<PostsType>\r\n    postPhoto: string | undefined \r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n    \r\n    let postsElements = props.posts\r\n        .map(posts => <Post message={posts.message} likeCount={posts.likesCount} key={posts.id} postPhoto={props.postPhoto} />);\r\n\r\n    const onSubmit = (formData: AddPostFormValuesType) =>{\r\n        props.addPost(formData.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPostsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostReduxForm onSubmit={onSubmit} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst MyPostMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostMemorized;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions} from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostsType } from '../../../utils/types';\r\nimport MyPosts from './myPosts';\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        postPhoto: state.profilePage.profile?.photos.small\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {addPost: actions.addPost}) (MyPosts);\r\n\r\nexport default MyPostsContainer\r\n\r\ntype MapPropsType = {\r\n    posts: Array<PostsType>\r\n    postPhoto: string | undefined\r\n}\r\ntype DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n} \r\n","import React, {useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) =>{\r\n\r\n    const [editMode,setEditMode] = useState(false);\r\n    const [status,setStatus] = useState(props.status);\r\n    \r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    },[props.status]);\r\n\r\n    const activateEditMode= () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange=(e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n            <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span  onDoubleClick={activateEditMode} >{props.status || \"------\"}</span>\r\n                </div>}\r\n                {editMode &&\r\n                <div>\r\n                    <input autoFocus={true} onBlur={deactivateEditMode} \r\n                    value={status} onChange={onStatusChange} />\r\n                </div>}\r\n            </div>\r\n        );\r\n    }\r\n\r\nexport default ProfileStatusWithHooks;","import { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { createField, GetStringKeys, Input, Textarea } from \"../../Common/FormsControls/FormsControls\"\r\nimport s from './ProfileInfo.module.css';\r\nimport style from \"../../Common/FormsControls/FormsControls.module.css\"\r\nimport { ProfileType } from \"../../../utils/types\";\r\n\r\n\r\nconst ProfileDataForm:React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <b>Full name:</b> {createField<ProfileTypeKeys>(\"FullName\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b> {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={s.contacts} key={key} >\r\n                        {/* ### todo: create some solution for embedded objects */}\r\n                        <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </div>\r\n                })}\r\n            </div>\r\n            {error && <div className={style.formSummaryError} >\r\n                {error}\r\n            </div>}\r\n            <div><button>Save</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileType, PropsType>({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\n\r\ntype PropsType = {profile: ProfileType}\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>","import React, { useState } from 'react';\r\nimport Preloader from '../../Common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport userPhoto from \"../../../assets/images/userPhoto.png\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\nimport ProfileDataForm from './ProfileDataForm';\r\n//import {ProfileComponentPropsType} from '../Profile'\r\nimport { ContactsType, ProfileType } from '../../../utils/types';\r\n\r\n\r\n//### When remove then delete this props and use ProfileComponentPropsType in ProfileInfo component\r\ntype PropsType = {\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    status: string\r\n    profile: ProfileType | null\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        saveProfile(formData)\r\n        //### todo: Remove Then\r\n        .then(()=>{\r\n        setEditMode(false)});\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n                {isOwner && <input type=\"file\" onChange={onMainPhotoSelected} />}\r\n            </div>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} key={key} />   //about keys 11th video 1:22:00\r\n                })}\r\n            </div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPopsType = {\r\n    contactValue: string\r\n    contactTitle: string\r\n}\r\nexport const Contact: React.FC<ContactsPopsType> = ({ contactTitle, contactValue }) => {\r\n    return (\r\n        <div className={s.contacts}>\r\n            <b>{contactTitle}: {contactValue} </b>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport { ProfileType } from '../../utils/types';\r\nimport MyPostsContainer from './myPosts/myPostsContainer';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\n\r\nexport type ProfileComponentPropsType = {\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    status: string\r\n    profile: ProfileType | null\r\n} \r\n\r\nconst Profile: React.FC<ProfileComponentPropsType> = (props) => {\r\n    return (\r\n        <div className={s.profilePage}>\r\n            <ProfileInfo saveProfile={props.saveProfile} isOwner={props.isOwner} \r\n            profile={props.profile} status={props.status} \r\n            updateStatus={props.updateStatus} \r\n            savePhoto={props.savePhoto} />\r\n            <div className=\"myPosts\">\r\n                <MyPostsContainer  />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { getStatus, getUserProfile, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\nimport { ProfileType } from '../../utils/types';\r\n\r\n\r\n\r\ntype DispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype PathParamsType = {userId: string}\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n    refreshProfile(){\r\n        let userId: number | null = +this.props.match.params.userId //about + 11th video 1:35:31\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                //### todo: maybe replace push with redirect?\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state(authorizedUserId)\")\r\n        } else{\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n        \r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if(this.props.match.params.userId != prevProps.match.params.userId ){\r\n        this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={!this.props.match.params.userId} \r\n            profile={this.props.profile} status={this.props.status} \r\n            updateStatus = {this.props.updateStatus} savePhoto ={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }   \r\n        ),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}