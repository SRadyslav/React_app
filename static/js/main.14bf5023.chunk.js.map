{"version":3,"sources":["utils/validators/validators.ts","components/Users/Users.module.css","components/Settings/Settings.module.css","components/Common/Pagination/Pagination.module.css","assets/images/userPhoto.png","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/Music/Music.module.css","components/News/News.module.css","components/News/newNews/newNews.module.css","components/Video/Video.module.css","components/Header/Header.module.css","api/api.ts","components/Music/Music.tsx","components/News/newNews/newNews.tsx","components/News/News.tsx","components/Settings/Settings.tsx","components/Video/Video.tsx","redux/users-selectors.ts","api/users-api.ts","utils/object-helpers.ts","redux/users-reducer.ts","components/Common/Pagination/Pagination.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersPage.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginForm.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/Common/FormsControls/FormsControls.tsx","assets/images/preloader.svg","components/Common/Preloader/Preloader.tsx","components/Common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPost","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getStatus","dispatch","a","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","getUserProfile","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageText","dialogsReducer","newMessage","subscribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","error","CleanUpAndClose","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","subscribes","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","ResultCodeEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","Music","props","className","item","likeCount","NewNews","src","News","news","Settings","href","Video","requestUsers","createSelector","usersPage","users","u","getPageSize","pageSize","getFilter","getTotalUsersCount","totalCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","usersAPI","getUsers","term","friend","follow","post","unfollow","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","_followUnfollowFlow","apiMethod","actionCreator","usersReducer","followed","Pagination","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","selectPage","onClick","cn","selectedPage","pageNumber","User","user","to","usersImg","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","placeholder","as","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","unfollow_","bind","follow_","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","securityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","createField","Input","undefined","formSummaryError","Login","CaptchaIsRequired","initialized","appReducer","sidebarReducer","rootReducer","combineReducers","app","profilePage","dialogsPage","sidebar","formReducer","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","Suspense","fallback","getIsAuth","getLogin","getProfilePhoto","Header","Layout","span","headerLogo","theme","mode","defaultSelectedKeys","Item","alt","style","backgroundColor","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ChatPage","SuspendedProfile","SuspendedDialogs","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","icon","UserOutlined","title","LaptopOutlined","NotificationOutlined","minHeight","path","render","exact","hash","replace","textAlign","Component","AppContainer","withRouter","connect","promise","all","MainJSApp","ReactDOM","StrictMode","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","component","text","preloader"],"mappings":"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","file":"static/js/main.14bf5023.chunk.js","sourcesContent":["export type FieldValidatorType = (value:string) => string | undefined\r\n\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\";\r\n} \r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__3sYNg\",\"usersImg\":\"Users_usersImg__piGhd\",\"selectPage\":\"Users_selectPage__3AawV\",\"selectedPage\":\"Users_selectedPage__QumV6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Settings_item__3CGjt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectPage\":\"Pagination_selectPage__WDGWq\",\"pageNumber\":\"Pagination_pageNumber__HFvPv\",\"selectedPage\":\"Pagination_selectedPage___jfyv\"};","export default __webpack_public_path__ + \"static/media/userPhoto.848e5527.png\";","import React from 'react'\r\nimport { instance, APIResponseType } from './api';\r\nimport { ProfilePhotoType, ProfileType } from './../utils/types';\r\n\r\n\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: ProfilePhotoType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType<Array<string>>>('profile/status/', { status: status }).then(res => res.data)\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>('profile/photo/', formData, {\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n    };","import { profileAPI } from '../api/profile-api';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport {PostsType, ProfilePhotoType, ProfileType} from \"../utils/types\"\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        { id: 1, message: \"Hey, how are you?\", likesCount: 23 },\r\n        { id: 2, message: \"it's my first post\", likesCount: 9 },\r\n        { id: 3, message: \"I'm so boring\", likesCount: 44 },\r\n        { id: 4, message: \"today i do some cool stuff\", likesCount: 53 },\r\n        { id: 5, message: \"Adorable dog\", likesCount: 109 }\r\n    ] as Array<PostsType>, \r\n    profile: null as ProfileType | null,\r\n    status: \"\" as string,\r\n};\r\n\r\n\r\nconst profileReducer = (state = initialState, action:ActionsType):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NW/PROFILE/ADD-POST\":\r\n            let newPost = {\r\n                id: state.posts.length + 1,\r\n                message: action.newPostText,\r\n                likesCount: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        case \"NW/PROFILE/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile,\r\n            };\r\n        case \"NW/PROFILE/SET-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            };\r\n        case \"NW/PROFILE/SAVE-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n            };\r\n        case \"NW/PROFILE/DELETE-POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id != action.postId)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    addPost: (newPostText:string) => ({type: \"NW/PROFILE/ADD-POST\", newPostText} as const),\r\n    setUserProfile: (profile:ProfileType) => ({type: \"NW/PROFILE/SET-USER-PROFILE\", profile} as const),\r\n    setStatus: (status:string) => ({type: \"NW/PROFILE/SET-STATUS\", status} as const),\r\n    deletePost: (postId:number) => ({type: \"NW/PROFILE/DELETE-POST\", postId} as const),\r\n    savePhotoSuccess: (photos:ProfilePhotoType) => ({type: \"NW/PROFILE/SAVE-PHOTO-SUCCESS\", photos} as const)\r\n}\r\n\r\n\r\n\r\n\r\nexport const getStatus = (userId:number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getStatus(userId);\r\n    dispatch(actions.setStatus(data));\r\n}\r\nexport const updateStatus = (status:string): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status));\r\n    }\r\n}\r\nexport const savePhoto = (file:File):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.savePhoto(file);\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos));\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile:ProfileType):ThunkType => \r\n    async (dispatch, getState) => {\r\n    const userId = getState().auth.userId;\r\n    const data = await profileAPI.saveProfile(profile);\r\n    if (data.resultCode === 0) {\r\n        if(userId != null){\r\n        dispatch(getUserProfile(userId));\r\n        } else{\r\n            throw Error(\"userId can't be null\")\r\n        }\r\n    }\r\n    else {\r\n        dispatch(stopSubmit(\"edit-profile\", { _error: data.messages[0] }));\r\n        return Promise.reject(data.messages[0]);\r\n    }\r\n}\r\nexport const getUserProfile = (userId:number):ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId);\r\n    dispatch(actions.setUserProfile(data));\r\n}\r\n\r\n\r\nexport default profileReducer\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\n\r\n","import { InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        { id: 1, name: \"Akashi\" },\r\n        { id: 2, name: \"Shenko\" },\r\n        { id: 3, name: \"Rina\" },\r\n        { id: 4, name: \"Venev\" },\r\n        { id: 5, name: \"Garage\" }\r\n    ] as Array<Dialog>,\r\n    messages: [\r\n        { id: 1, message: \"hey bro\" },\r\n        { id: 2, message: \"yo\" },\r\n        { id: 3, message: \"How's life?\" },\r\n        { id: 4, message: \"not complain\" },\r\n        { id: 5, message: \"how about go some bar?\" }\r\n    ] as Array<Message>,\r\n};\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case \"SN/DIALOGS/SEND-MESSAGE\": {\r\n            let newMessage = {\r\n                id: state.messages.length + 1,\r\n                message: action.newMessageText,\r\n            };\r\n            return { \r\n                ...state,\r\n                messages: [...state.messages,newMessage],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport const actions = {\r\n    sendMessage: (newMessageText: string) => ({type: \"SN/DIALOGS/SEND-MESSAGE\", newMessageText,} as const)\r\n}\r\n\r\n\r\nexport default dialogsReducer\r\n\r\n\r\ntype Dialog= {\r\n    id: number\r\n    name: string\r\n} \r\ntype Message= {\r\n    id: number\r\n    message: string\r\n}\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","\r\n\r\n\r\n\r\nconst subscribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n} \r\n\r\n\r\nlet ws: WebSocket | null = null\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers[\"messages-received\"].forEach(s=> s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\n\r\nconst CleanUpAndClose = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)  \r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)  \r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers[\"status-changed\"].forEach(s => s(status))\r\n} \r\n\r\nfunction createChannel() {\r\n    CleanUpAndClose()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)  \r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\n\r\n\r\nexport const chatAPI =  {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop(){\r\n        subscribers['messages-received'] = []\r\n        subscribers['status-changed'] = []\r\n        CleanUpAndClose()\r\n        ws?.close()\r\n        \r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return ()=>{\r\n            //@ts-ignore\r\n            subscribes[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        //@ts-ignore\r\n        subscribes[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n\r\ntype MessagesReceivedSubscriberType =(messages: ChatMessageAPIType[])=>void\r\ntype StatusChangedSubscriberType =(status: StatusType)=>void","import { Dispatch } from 'redux';\r\nimport { stopSubmit } from 'redux-form';\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../api/chat-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\nimport {v1} from 'uuid'\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\n\r\nconst chatReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'FN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({...m, id: v1()}))].filter((m, index, array) => index >= array.length - 100)\r\n            };\r\n        case 'FN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages : ChatMessageAPIType[]) => ({\r\n        type: 'FN/chat/MESSAGES_RECEIVED', payload: {messages}} as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'FN/chat/STATUS_CHANGED', payload: {status}} as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages :ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if(_newMessageHandler === null) {\r\n        _newMessageHandler = (messages)=>\r\n        {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if(_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status)=>\r\n        {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\n\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    \r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed',statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n\r\n}\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionType | ReturnType<typeof stopSubmit>>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionType = InferActionsTypes<typeof actions>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Music_item__1lGjG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"News_item__3T5NV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"newNews_item__1RQ1F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Video_item__mfs0f\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerLogo\":\"Header_headerLogo__3Z1Ko\",\"header\":\"Header_header__oFMyV\",\"header__inner\":\"Header_header__inner__2s3Cf\",\"loginBlock\":\"Header_loginBlock__7oiKz\",\"navLink\":\"Header_navLink__ai75N\"};","import axios from \"axios\";\r\n///### fix issue when u log out and click profile UI send get() on server first and then redirect to login and if spam this app\r\n\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: `https://social-network.samuraijs.com/api/1.0/`,\r\n  headers: {\r\n    \"API-KEY\": \"2dd72eef-802e-4320-bbb3-7057aa545a8d\",\r\n  }\r\n})\r\n\r\nexport type APIResponseType<D={}, RC = ResultCodeEnum> = {\r\n  data: D\r\n  resultCode: RC\r\n  messages: Array<string>\r\n}\r\n\r\nexport enum ResultCodeEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\nexport enum ResultCodeForCaptchaEnum {\r\n  CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType<T> ={\r\n  items: T\r\n  totalCount: number\r\n  error: string | null\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\ntype PropsType = {\r\n    likeCount: number | null\r\n}\r\nconst Music: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            music1\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './newNews.module.css';\r\n\r\ntype PropsType = {\r\n    likeCount: number\r\n    message: string\r\n}\r\n\r\nconst NewNews: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.item}>\r\n            <img src=\"https://vjoy.cc/wp-content/uploads/2020/10/prikolnye-avatarki-vk-dlya-parnej_023.jpg\"></img>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewNews;","import React from 'react';\r\nimport s from './News.module.css';\r\nimport NewNews from \"./newNews/newNews\"\r\nconst News: React.FC = () => {\r\n    return (\r\n        <div className={s.news}>\r\n            <NewNews message=\"Hey, how are you?\" likeCount={23} />\r\n            <NewNews message=\"it's my first post\" likeCount={1} />\r\n            <NewNews message=\"I'm so boring\" likeCount={9} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default News;","import { type } from 'os';\r\nimport React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\ntype PropsType = {}\r\nconst Settings: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <a className={s.item} href=\"/profileSettings\" >Profile</a>\r\n                </div>\r\n                <div>\r\n                <a className={s.item} href=\"/privacy\" >Privacy</a>\r\n                </div>\r\n                <div>\r\n                <a className={s.item} href=\"/account\" >Account</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './Video.module.css';\r\n\r\ntype PropsType = {\r\n    likeCount: number\r\n}\r\n\r\nconst Video: React.FC<PropsType> = (props) => {\r\n    debugger\r\n    return(\r\n        <div className={s.item}>\r\n            Video1\r\n            <div>\r\n                <span>like</span> {props.likeCount}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Video;","import { AppStateType } from './redux-store';\r\nimport {createSelector} from \"reselect\"\r\n\r\n\r\nconst requestUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const requestUsers = createSelector(requestUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true)\r\n    })\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n","import { UsersType } from './../utils/types';\r\nimport { instance, GetItemsType, APIResponseType } from './api';\r\nimport React from 'react'\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 1, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType<Array<UsersType>>>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend===null ? '' : `&friend=${friend}`))\r\n        .then(res => res.data);\r\n    },\r\n\r\n    follow(userId:number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n};","\r\n\r\nexport const updateObjectInArray = (items:any, itemId:any, objPropName:any, newObjProps:any) => {\r\nreturn items.map((u:any) => {\r\n    if (u[objPropName] === itemId) {\r\n        return { ...u, ...newObjProps}\r\n    }\r\n    return u;\r\n})\r\n}","import { UsersType } from \"../utils/types\";\r\nimport { usersAPI } from \"../api/users-api\";\r\nimport { updateObjectInArray } from \"../utils/object-helpers\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./redux-store\";\r\nimport { Dispatch } from \"redux\";\r\nimport { APIResponseType } from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10 as number,\r\n    totalCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    isFetching: false as boolean,\r\n    followingInProgress: [] as Array<number>, // array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean \r\n    } \r\n}\r\n\r\nconst usersReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"NW/USERS/FOllOW\":\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            };\r\n        case \"NW/USERS/UNFOllOW\" :\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            };\r\n        case \"NW/USERS/SET_CURRENT_PAGE\" :\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage,\r\n            }\r\n        case \"NW/USERS/SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"NW/USERS/SET_FILTER\":\r\n            return {\r\n                ...state,\r\n                filter: {...action.payload}\r\n            }\r\n        case \"NW/USERS/SET_TOTAL_USERS_COUNT\":\r\n            return {\r\n                ...state,\r\n                totalCount: action.totalCount,\r\n            }\r\n        case \"NW/USERS/TOGGLE_IS_FETCHING\":\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching,\r\n            }\r\n        case \"NW/USERS/TOGGLE_IS_FOLLOWING\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    [state.followingInProgress.filter(id => id != action.userId)],\r\n            } as InitialStateType\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId:number) => ({type: \"NW/USERS/FOllOW\", userId} as const),\r\n    unfollowSuccess: (userId:number) => ({type: \"NW/USERS/UNFOllOW\", userId} as const),\r\n    setCurrentPage: (currentPage:number) => ({type: \"NW/USERS/SET_CURRENT_PAGE\", currentPage} as const),\r\n    setUsers: (users:Array<UsersType>) => ({type: \"NW/USERS/SET_USERS\", users} as const),\r\n    setFilter: (filter: FilterType) => ({type: \"NW/USERS/SET_FILTER\", payload: {...filter}} as const),\r\n    setTotalUsersCount: (totalCount:number) => ({type: \"NW/USERS/SET_TOTAL_USERS_COUNT\", totalCount} as const),\r\n    toggleIsFetching: (isFetching:boolean) => ({type: \"NW/USERS/TOGGLE_IS_FETCHING\", isFetching} as const),\r\n    toggleFollowingProgress: (isFetching:boolean, userId:number) => ({type: \"NW/USERS/TOGGLE_IS_FOLLOWING\", isFetching, userId} as const)\r\n}\r\n\r\n\r\nexport const getUsers = (currentPage:number, pageSize:number, filter: FilterType):ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(currentPage))\r\n        dispatch(actions.setFilter(filter))\r\n        \r\n        const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n            dispatch(actions.toggleIsFetching(false));\r\n            dispatch(actions.setUsers(data.items));\r\n            dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\n\r\n\r\n//### type for apiMethod\r\nconst _followUnfollowFlow = async(dispatch: Dispatch<ActionsTypes>, userId:number, apiMethod: (userId: number) => Promise<APIResponseType>, \r\n    actionCreator: (userId: number) => ActionsTypes ) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n        let response = await apiMethod(userId);\r\n                if (response.resultCode == 0) {\r\n                    dispatch(actionCreator(userId));\r\n                }\r\n                dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\nexport const follow = (userId:number): ThunkType => {\r\n    return  async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId:number): ThunkType => {\r\n\r\n    return async (dispatch) => {\r\n    await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess);\r\n    }\r\n}\r\n\r\n\r\nexport default usersReducer\r\n\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import React, { useState } from \"react\";\r\nimport s from \"./Pagination.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype PropsType = {\r\n    totalCount: number\r\n    pageSize: number \r\n    onPageChanged?: (pageNumber:number)=> void\r\n    currentPage?:number \r\n    portionSize?: number\r\n}\r\n\r\nconst Pagination: React.FC<PropsType> = ({ totalCount, pageSize, onPageChanged = x => x, currentPage = 1, portionSize = 20 }) => {\r\n    let pagesCount = Math.ceil(totalCount / pageSize);\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={s.selectPage}>\r\n            {portionNumber > 1 &&\r\n                <button onClick={() => { setPortionNumber(portionNumber - 1) }}>Prev</button>}\r\n\r\n            {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                    return <span\r\n                        onClick={(e) => {\r\n                            onPageChanged(p);\r\n                        }}\r\n                        key={p}\r\n                        className={cn({[s.selectedPage]:currentPage === p},  s.pageNumber)}>{p}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n                <button onClick={() => { setPortionNumber(portionNumber + 1) }} >Next</button>}\r\n        </div>\r\n    )\r\n}\r\nexport default Pagination;\r\n","import React from \"react\";\r\nimport s from \"./Users.module.css\"\r\nimport userPhoto from \"../../assets/images/userPhoto.png\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UsersType } from \"../../utils/types\";\r\n\r\n\r\ntype PropsType = {\r\n    user: UsersType\r\n    followingInProgress: Array<number>\r\n    unfollow: (id: number) => void\r\n    follow: (id: number) => void\r\n\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, ...props}) => {\r\n    return (\r\n        <div>\r\n            <span>\r\n                <div>\r\n                    <NavLink to={\"/profile/\" + user.id}>\r\n                        <img className={s.usersImg} src={user.photos.small != null ? user.photos.small : userPhoto} />\r\n                    </NavLink>\r\n                </div>\r\n                <div>\r\n                    {user.followed\r\n                        ? <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { props.unfollow(user.id); }} >\r\n                            Unfollow</button>\r\n                        : <button disabled={props.followingInProgress.some(id => id === user.id)}\r\n                            onClick={() => { props.follow(user.id); }} >\r\n                            Follow</button>}\r\n                </div>\r\n            </span>\r\n            <span>\r\n                <span>\r\n                    <div>{user.name}</div>\r\n                    <div>{user.status}</div>\r\n                </span>\r\n                <span>\r\n                    <div>{\"user.location.city\"}</div>\r\n                    <div>{\"user.location.country\"}</div>\r\n                </span>\r\n            </span>\r\n        </div>)\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport { Field, Form, Formik } from \"formik\";\r\nimport { FilterType } from \"../../redux/users-reducer\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFilter } from \"../../redux/users-selectors\";\r\n\r\n\r\ntype FriendFormType = \"true\" | \"false\" | \"null\";\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: FriendFormType\r\n} \r\nexport const usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType)=> void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    \r\n    const filter = useSelector(getFilter)\r\n\r\n    const onSubmit = (values: FormType, { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void; }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === \"null\" ? null : values.friend === \"true\" ? true : false\r\n        }\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                enableReinitialize\r\n                initialValues={{ term: filter.term, friend: String(filter.friend) as FriendFormType }}\r\n                validate={usersSearchFormValidate}\r\n                onSubmit={onSubmit}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"term\" placeholder=\"Find by name\" />\r\n                        <Field as=\"select\" name=\"friend\">\r\n                            <option value=\"null\">All</option>\r\n                            <option value=\"true\">Only followed</option>\r\n                            <option value=\"false\">Only unfollowed</option>\r\n                        </Field>\r\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n})\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FilterType, getUsers, follow, unfollow } from \"../../redux/users-reducer\";\r\nimport { getCurrentPage, getFilter, getFollowingInProgress, getPageSize, getTotalUsersCount, requestUsers } from \"../../redux/users-selectors\";\r\nimport Pagination from \"../Common/Pagination/Pagination\";\r\nimport User from \"./User\";\r\nimport s from \"./Users.module.css\";\r\nimport { UsersSearchForm } from \"./UsersSearchForm\";\r\nimport * as queryString from 'querystring'\r\n\r\n\r\ntype PropsType = {}\r\ntype QueryParamsType = {\r\n    term?: string;\r\n    page?: string;\r\n    friend?: string;\r\n}\r\n\r\nexport const Users:React.FC<PropsType> = () => {\r\n\r\n    const totalCount= useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const users = useSelector(requestUsers)\r\n    const pageSize = useSelector(getPageSize)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const filter = useSelector(getFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n        \r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if(!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n        if(!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n        switch (parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(getUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: \"/developers\",\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n    \r\n    const onPageChanged = (pageNumber:number) => {\r\n        dispatch(getUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(getUsers(1, pageSize, filter))\r\n    }\r\n    const unfollow_ = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    const follow_ = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.users}>\r\n            <UsersSearchForm onFilterChanged = {onFilterChanged} />\r\n\r\n            <Pagination currentPage={currentPage} onPageChanged={onPageChanged} totalCount={totalCount} pageSize={pageSize} />\r\n            <div>\r\n                {users.map(u => <User user={u} key={u.id} followingInProgress={followingInProgress} unfollow={unfollow_} follow={follow_} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsFetching } from \"../../redux/users-selectors\";\r\nimport Preloader from \"../Common/Preloader/Preloader\";\r\nimport { Users } from \"./Users\";\r\n\r\n\r\ntype PropsType = {\r\n    pageTitle: string\r\n}\r\n\r\n//### todo: Add HOC withRedirect for UsersPage\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (<>\r\n    <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader /> : null}\r\n        <Users />\r\n    </>\r\n    )\r\n}\r\n","import { AxiosPromise } from 'axios';\r\nimport React from 'react'\r\nimport { instance, ResultCodeEnum, ResultCodeForCaptchaEnum,APIResponseType } from './api';\r\n\r\n\r\n\r\n\r\ntype MeResponseDataType = {\r\n    id:number\r\n    email: string \r\n    login:string\r\n}\r\ntype LoginResponseType = {userId:number}\r\ntype LoginResultCodeType = ResultCodeEnum | ResultCodeForCaptchaEnum\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res=>res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseType, LoginResultCodeType>>(`auth/login`, { email, password, rememberMe, captcha }).then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`) as AxiosPromise<APIResponseType> ;\r\n    },\r\n    }\r\n","import React from 'react'\r\nimport {instance} from './api';\r\n\r\n\r\ntype getCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    },\r\n}","import { stopSubmit } from 'redux-form';\r\nimport { ResultCodeEnum, ResultCodeForCaptchaEnum } from '../api/api';\r\nimport {authAPI} from '../api/auth-api';\r\nimport { securityAPI} from '../api/security-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,  //if null, then captcha is not required\r\n    userId: null as number | null\r\n}\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"FN/auth/SET_USER_DATA\":\r\n        case \"FN/auth/GET_CAPTCHA_URL_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId:number| null, email: string| null, login: string| null, isAuth: boolean) => ({\r\n        type: \"FN/auth/SET_USER_DATA\", payload: { userId, email, login, isAuth }} as const),\r\n    getCaptchaUrlSuccess: (captcha: string) => ({\r\n        type: \"FN/auth/GET_CAPTCHA_URL_SUCCESS\", payload: {captcha}} as const)\r\n\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    const meData = await authAPI.me();\r\n        if (meData.resultCode === ResultCodeEnum.Success) {\r\n        let { id, email, login } = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true));\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n\r\n    const data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodeEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    }\r\n\r\n    else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"some Error\";\r\n        dispatch(stopSubmit(\"login\", { _error: message }));\r\n    }\r\n}\r\nexport const logout = ():ThunkType => async (dispatch) => {\r\n    const response = await authAPI.logout();\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl();\r\n    const captchaUrl = data.url;\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\n\r\nexport default authReducer\r\n\r\n\r\ntype ThunkType = BaseThunkType<ActionType | ReturnType<typeof stopSubmit>>\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionType = InferActionsTypes<typeof actions>","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { required } from \"../../utils/validators/validators\";\r\nimport { createField, GetStringKeys, Input } from \"../Common/FormsControls/FormsControls\";\r\nimport s from \"../Common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType> = ({ handleSubmit, error, captchaUrl }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>(\"Email\", \"email\", [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>(\"Password\", \"password\", [required], Input, { type: \"password\" })}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"Remember me\")}\r\n\r\n            {captchaUrl && <img src={captchaUrl} />}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>(\"Symbols from image\", \"captcha\", [required], Input)}\r\n\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Sign in</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({ form: 'login' })(LoginForm)\r\n\r\n\r\ntype LoginFormOwnPropsType = { captchaUrl: string | null; }\r\nexport type LoginFormValuesType = {\r\n    email: string;\r\n    password: string;\r\n    rememberMe: boolean;\r\n    captcha: string;\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { LoginFormValuesType, LoginReduxForm } from \"./LoginForm\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\nexport const Login: React.FC<PropsType> = (props) => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state:AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n    if(isAuth){\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n    //globalError: null,\r\n}\r\n\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SN/APP/INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: \"SN/APP/INITIALIZED_SUCCESS\"} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise]).then(()=>{\r\n        dispatch(actions.initializedSuccess());\r\n    })\r\n}\r\n\r\n\r\nexport default appReducer\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","\r\n\r\nlet initialState = {\r\n};\r\n\r\ntype sidebarReducerActionType = any;\r\nconst sidebarReducer = (state=initialState, action:sidebarReducerActionType) =>{\r\n    return(state);\r\n}\r\n\r\nexport default sidebarReducer\r\n\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\n","import { applyMiddleware, combineReducers, createStore, compose, Action } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, { ThunkAction } from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\"\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    app: appReducer,\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    chat : chatReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer; //(globalState: appStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[key: string]: (...args: any[]) => infer U} ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n\r\n//let store = createStore(rootReducer,applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from \"react\";\r\nimport Preloader from \"../components/Common/Preloader/Preloader\";\r\n\r\nexport function withSuspense <WCP> (WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props:WCP) => {\r\n        return <React.Suspense fallback={<Preloader />} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}","import { AppStateType } from './redux-store';\r\n\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\nexport const getProfilePhoto = (state: AppStateType) => {\r\n    return state.profilePage.profile?.photos.small\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Layout, Menu, Row, Col, Button } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getIsAuth, getLogin, getProfilePhoto } from '../../redux/auth-selectors';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport s from './Header.module.css';\r\n\r\n\r\n\r\n\r\nexport const Header: React.FC = () => {\r\nconst { Header} = Layout;\r\n\r\nconst  small  = useSelector(getProfilePhoto)\r\nconst isAuth = useSelector(getIsAuth)\r\nconst login = useSelector(getLogin)\r\nconst dispatch = useDispatch()\r\nconst logoutCallback = () => {\r\n    dispatch(logout())\r\n}\r\n\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n        <Row>\r\n            <Col span={1}>\r\n            <img className={s.headerLogo} src='https://pngimg.com/uploads/circle/circle_PNG50.png' />\r\n            </Col>\r\n            <Col span={19}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                <Menu.Item key=\"1\"><Link to=\"/developers\"> Developers </Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n            {isAuth \r\n                ? <> <Col span={1}>\r\n                        <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} src={small} />\r\n                        \r\n                    </Col>\r\n                    <Col span={3}>\r\n                        <Button onClick={logoutCallback} >Log out</Button>\r\n                    </Col> </>\r\n                : <Col span={4}> <Button> <Link  to=\"/login\" >Login</Link> </Button> </Col>\r\n            }\r\n        </Row>      \r\n    </Header>\r\n    )\r\n}\r\n\r\n\r\n","import React, { Component} from 'react';\nimport 'antd/dist/antd.css'\nimport  './App.css';\nimport { Route, withRouter, HashRouter, Switch, Redirect, Link } from \"react-router-dom\";\nimport Music from './components/Music/Music';\nimport News from './components/News/News';\nimport Settings from './components/Settings/Settings';\nimport Video from './components/Video/Video';\nimport {UsersPage} from './components/Users/UsersPage';\nimport {Login} from './components/Login/Login';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport { initializeApp } from './redux/app-reducer';\nimport Preloader from './components/Common/Preloader/Preloader';\nimport store, { AppStateType } from './redux/redux-store';\nimport { withSuspense } from './hoc/withSuspense';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { UserOutlined, LaptopOutlined, NotificationOutlined } from '@ant-design/icons';\nimport { Header } from './components/Header/Header';\n\n\nconst { SubMenu } = Menu;\nconst {  Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\n\n\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {initializeApp:() => void}\n\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedChatPage = withSuspense(ChatPage)\n\nclass App extends Component<MapPropsType &  DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occurred\");\n  }\n  componentDidMount() {\n    \n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n  \n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />\n    }\n    return (\n      <Layout>\n        <Header />\n    <Content style={{ padding: '0 50px' }}>\n      <Breadcrumb style={{ margin: '16px 0' }}>\n        <Breadcrumb.Item>Home</Breadcrumb.Item>\n        <Breadcrumb.Item>List</Breadcrumb.Item>\n        <Breadcrumb.Item>App</Breadcrumb.Item>\n      </Breadcrumb>\n      <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n        <Sider className=\"site-layout-background\" width={200}>\n          <Menu\n            mode=\"inline\"\n            //defaultSelectedKeys={['1']}\n            //defaultOpenKeys={['sub1']}\n            style={{ height: '100%' }}\n          >\n\n\n\n            <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n              <Menu.Item key=\"1\"><Link to=\"/profile\" > Profile </Link></Menu.Item>\n              <Menu.Item key=\"2\"><Link to=\"/dialogs\" > Message </Link></Menu.Item>\n              <Menu.Item key=\"3\">option3</Menu.Item>\n              <Menu.Item key=\"4\">option4</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n              <Menu.Item key=\"5\"><Link to=\"/developers\"> Developers </Link></Menu.Item>\n              <Menu.Item key=\"6\">option6</Menu.Item>\n              <Menu.Item key=\"7\">option7</Menu.Item>\n              <Menu.Item key=\"8\">option8</Menu.Item>\n            </SubMenu>\n            <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"subnav 3\">\n              <Menu.Item key=\"9\"><Link to=\"/Chat\"> Main Chat </Link></Menu.Item>\n              <Menu.Item key=\"10\">option10</Menu.Item>\n              <Menu.Item key=\"11\">option11</Menu.Item>\n              <Menu.Item key=\"12\">option12</Menu.Item>\n            </SubMenu>\n          </Menu>\n        </Sider>\n        <Content style={{ padding: '0 24px', minHeight: 280 }}> \n              <Switch>\n                <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile /> } />\n                <Route path=\"/developers\" render={() => <UsersPage pageTitle={'Samurai'} /> } />\n                <Route path=\"/dialogs\" render={() => <SuspendedDialogs /> } />\n                <Route path=\"/news\" render={() => <News />} />\n                <Route path=\"/music\" render={() => <Music likeCount={10} />} />\n                <Route path=\"/video\" render={() => <Video  likeCount={1} />} />\n                <Route path=\"/settings\" render={() => <Settings />} />\n                <Route path=\"/login\" render={() => <Login />} />\n                <Route path=\"/Chat\" render={() => <SuspendedChatPage />} />\n\n\n                <Route exact path=\"/\" render={() => <SuspendedProfile /> } />\n                <Route exact path='/' render={({ location }) => <Redirect to={location.hash.replace('#', '')} />} />\n                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\n              </Switch>\n        </Content>\n      </Layout>\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Samurai Social Network ©2021 Created by RadySlav</Footer>\n  </Layout>\n\n\n\n      // <div className='app-wrapper'>\n      //   <div className=\"container\">\n      //     <HeaderContainer />\n      //     <NavBar />\n      //     <div className='app-wrapper-content'>\n      //       <Switch>\n      //         <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile /> } />\n      //         <Route path=\"/users\" render={() => <UsersPage pageTitle={'Samurai'} /> } />\n      //         <Route path=\"/dialogs\" render={() => <SuspendedDialogs /> } />\n      //         <Route path=\"/news\" render={() => <News />} />\n      //         <Route path=\"/music\" render={() => <Music likeCount={10} />} />\n      //         <Route path=\"/video\" render={() => <Video  likeCount={1} />} />\n      //         <Route path=\"/settings\" render={() => <Settings />} />\n      //         <Route path=\"/login\" render={() => <Login />} />\n      //         <Route exact path=\"/\" render={() => <SuspendedProfile /> } />\n      //         <Route exact path='/' render={({ location }) => <Redirect to={location.hash.replace('#', '')} />} />\n      //         <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\n      //       </Switch>\n      //     </div>\n      //   </div>\n      // </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized\n})\n\nconst AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App);\n\nconst MainJSApp: React.FC = () => {\n  return <HashRouter>\n    <Provider store={store} >\n      <AppContainer />\n    </Provider>\n  </HashRouter>\n}\n\nexport default MainJSApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport MainJSApp from './App';\n\n\n\n\nReactDOM.render(\n    <React.StrictMode>\n                <MainJSApp />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n\n\n\n\n\n","import React from \"react\";\r\nimport { Field, WrappedFieldMetaProps, WrappedFieldProps } from \"redux-form\";\r\nimport { FieldValidatorType } from \"../../../utils/validators/validators\";\r\nimport s from \"./FormsControls.module.css\"\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps,\r\n    //children: React.ReactNode\r\n}\r\n\r\n\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({ meta: {touched, error}, children }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")} >\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, /*child,*/ ...restProps } = props;\r\n    return (<FormControl {...props} > <textarea {...restProps}  {...input} /> </FormControl>)\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const { input, meta, /*child,*/ ...restProps } = props;\r\n    return (<FormControl {...props} > <input {...restProps}  {...input} /> </FormControl>)\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder:string | undefined,\r\n        name: FormKeysType, validate:Array<FieldValidatorType>,\r\n        component: React.FC<WrappedFieldProps> , props = {}, text = \"\") {\r\nreturn <div>\r\n    <Field placeholder={placeholder} name={name}\r\n        component={component} validate={validate}\r\n        {...props} /> {text}\r\n</div>}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string> \r\n","export default __webpack_public_path__ + \"static/media/preloader.ff9c62d0.svg\";","import React from \"react\";\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\n\r\nlet Preloader: React.FC = () => {\r\nreturn(<img src={preloader} /> )\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3QZ_N\",\"error\":\"FormsControls_error__1np90\",\"formSummaryError\":\"FormsControls_formSummaryError__3djTV\"};"],"sourceRoot":""}