{"version":3,"sources":["components/Dialogs/Message/Message.tsx","components/Dialogs/Message/Message.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"names":["Message","React","memo","props","className","s","message","src","chatMessage","photo","avatar","userName","module","exports","DialogItem","path","id","dialog","to","activeClassName","active","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","style","height","overflowY","inputBlock","formData","sendMessage","newMessageText","compose","connect","actions","WrappedComponent","isAuth","auth","restProps"],"mappings":"mJAUMA,EAA+BC,IAAMC,MAAK,SAACC,GAAW,IAAD,MAEvD,OACA,sBAAKC,UAAWC,IAAEC,QAAlB,UACI,qBAAKC,IAAG,UAAEJ,EAAMK,mBAAR,aAAE,EAAmBC,MAAOL,UAAWC,IAAEK,SADrD,IACgE,sCAAIP,EAAMK,mBAAV,aAAI,EAAmBG,WACnF,yBACGR,EAAMG,SAAWH,EAAMG,SACxBH,EAAMG,UAAP,UAAkBH,EAAMK,mBAAxB,aAAkB,EAAmBF,SAEtC,6BAMON,O,oBCxBfY,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,oBCA9DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,WAAa,8B,oBCApJD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,OAAS,6B,uHCiBhDC,EAVyB,SAACX,GACrC,IAAIY,EAAM,aAAeZ,EAAMa,GAC/B,OACI,qBAAKZ,UAAWC,IAAEY,OAAlB,SACY,eAAC,IAAD,CAASC,GAAIH,EAAMI,gBAAiBd,IAAEe,OAAtC,cAAgDjB,EAAMkB,KAAtD,U,mCCLdC,EAAcC,YAAiB,IAWtBC,cAA8B,CAACC,KAAK,wBAApCD,EATuF,SAACrB,GACnG,OACI,uBAAOuB,SAAUvB,EAAMwB,aAAvB,UACKC,YAAoC,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,KAClG,gDCiCDC,EA9BsB,SAAC5B,GAClC,IAAI6B,EAAQ7B,EAAM8B,YAEdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAnB,GAAM,OAAI,cAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAML,GAAIC,EAAOD,IAASC,EAAOD,OAEzEqB,EAAmBL,EAAMM,SACxBF,KAAI,SAAA9B,GAAO,OAAI,cAACN,EAAA,EAAD,CAASM,QAASA,EAAQA,SAAcA,EAAQU,OAKpE,OACI,sBAAKZ,UAAWC,IAAE8B,QAAlB,UACI,qBAAK/B,UAAWC,IAAEkC,aAAlB,SACKL,IAEL,qBAAK9B,UAAWC,IAAEiC,SAAUE,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAjE,SACI,gCAAML,EAAN,SAGJ,qBAAKjC,UAAWC,IAAEsC,WAAlB,SACA,cAAC,EAAD,CAAqBjB,SAbZ,SAACkB,GACdzC,EAAM0C,YAAYD,EAASE,yB,mCCPpBC,sBACXC,aATkB,SAAChB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAOE,CAACY,YAAYI,IAAQJ,eCb3C,SAAgCK,GAanC,OAFqCF,aALJ,SAAChB,GAAD,MAA0B,CACvDmB,OAAQnB,EAAMoB,KAAKD,UAIsG,GAAxFH,EAViC,SAAC7C,GAAW,IACzEgD,EAAwBhD,EAAxBgD,OAAWE,EAD6D,YAChDlD,EADgD,YAE7E,OAAIgD,EACG,cAACD,EAAD,eAAsBG,IADV,cAAC,IAAD,CAAUnC,GAAG,gBDSzB6B,CAGbhB","file":"static/js/4.4f3925c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ChatMessageAPIType } from '../../../api/chat-api';\r\nimport s from \"./Message.module.css\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n    message?: string\r\n    chatMessage?: ChatMessageAPIType\r\n}\r\nconst Message: React.FC<PropsType> = React.memo((props) => {\r\n    \r\n    return (\r\n    <div className={s.message}>\r\n        <img src={props.chatMessage?.photo} className={s.avatar} /> <b>{props.chatMessage?.userName}</b>\r\n        <br/>\r\n        {!!props.message && props.message }\r\n        {!props.message && props.chatMessage?.message}\r\n        \r\n        <hr/>\r\n    </div>\r\n    )\r\n})\r\n\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__uNlBl\",\"avatar\":\"Message_avatar__1X8Yo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__13Stm\",\"dialogsItems\":\"Dialogs_dialogsItems__2F_XI\",\"messages\":\"Dialogs_messages__dfQ9m\",\"inputBlock\":\"Dialogs_inputBlock__SLgls\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__1d3g2\",\"active\":\"DialogItem_active__1MTTb\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './DialogItem.module.css'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path= \"/dialogs/1\" + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n                    <NavLink to={path} activeClassName={s.active}> {props.name} </NavLink>\r\n                </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { createField, Textarea } from \"../../Common/FormsControls/FormsControls\";\r\nimport {NewMessageFormType} from \"../Dialogs\"\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> & PropsType> = (props) => {\r\n    return(\r\n        <form  onSubmit={props.handleSubmit}  >\r\n            {createField<NewMessageFormTypeKeys>(\"Enter your message\", \"newMessageText\", [required, maxLength50], Textarea)}\r\n                <button >Send</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormType>({form:'dialogAddMessageForm'})(AddMessageForm);\r\n\r\n\r\ntype NewMessageFormTypeKeys = Extract<keyof NewMessageFormType, string>\r\ntype PropsType = {}","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\"\r\nimport Message from \"./Message/Message\"\r\nimport { Redirect } from 'react-router-dom';\r\nimport AddMessageFormRedux from \"./Message/AddMessageForm\"\r\nimport { InitialStateType } from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\nexport type NewMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(dialog => <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />);\r\n\r\n    let messagesElements = state.messages\r\n        .map(message => <Message message={message.message} key={message.id} />);\r\n\r\n    const onSubmit = (formData: NewMessageFormType) =>{\r\n        props.sendMessage(formData.newMessageText);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages} style={{ height: '615px', overflowY: 'auto'}}>\r\n                <div>{messagesElements} </div>\r\n                \r\n            </div>\r\n            <div className={s.inputBlock}>\r\n            <AddMessageFormRedux onSubmit={onSubmit} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Dialogs","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {sendMessage:actions.sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs);;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\n\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP>) {/// WCP --- Wrapped Component Props\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if(!isAuth) return <Redirect to=\"/login\" />;\r\n        return <WrappedComponent {...restProps as unknown as WCP}  />;\r\n    }\r\n    let mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n\r\n    \r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n\r\ntype MapPropsType = {isAuth: boolean}\r\ntype DispatchPropsType = {}"],"sourceRoot":""}